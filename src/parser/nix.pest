WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "#" ~ (!"\n" ~ ANY)* }

identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_" | "-")* }
integer = @{ ASCII_DIGIT+ }
float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
boolean = @{ "true" | "false" }
null = @{ "null" }

string = ${ "\"" ~ inner_string ~ "\"" }
inner_string = { ( "\\\"" | !"\"" ~ ANY )* }
indented_string = ${ "''" ~ inner_indented_string ~ "''" }
inner_indented_string = { ( "'''" | !"''" ~ ANY )* }

path = ${ ("/" | "./" | "../") ~ path_component ~ ("/" ~ path_component)* }
path_component = @{ (!("/" | WHITESPACE) ~ ANY)+ }
search_path = ${ "<" ~ (!">" ~ ANY)+ ~ ">" }
uri = ${ ("http://" | "https://" | "file://") ~ uri_component+ }
uri_component = @{ (!WHITESPACE ~ ANY)+ }

operator = {
    "+" | "-" | "*" | "/" | "++" |
    "==" | "!=" | "<" | "<=" | ">=" | ">" |
    "&&" | "||" | "!" | "->" | "?" | ":" |
    "//" | "=" | "@" | "..."
}

// === Function Heads ===

// Simple function head: single identifier
function_head_simple = { identifier }

// Destructured function head: attribute set style parameters
function_head_destructured = { "{" ~ identifier ~ ("," ~ identifier)* ~ "}" }

// Function head can be either simple or destructured
function_head = _{ function_head_simple | function_head_destructured }

// Function: head => expr
function = { function_head ~ "=>" ~ expr }

// Function application: identifier(expr, ...)
function_application = { identifier ~ "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }

// === Expressions & Operators without left recursion ===
expr = { logical_or }

logical_or = { logical_and ~ ( "||" ~ logical_and )* }
logical_and = { equality ~ ( "&&" ~ equality )* }
equality = { comparison ~ ( ( "==" | "!=" ) ~ comparison )* }
comparison = { addition ~ ( ( "<" | "<=" | ">" | ">=" ) ~ addition )* }
addition = { multiplication ~ ( ( "+" | "-" ) ~ multiplication )* }
multiplication = { unary ~ ( ( "*" | "/" ) ~ unary )* }
unary = { ( "!" | "-" )* ~ primary }

primary = _{
    function |
    function_application |
    atom
}

attr_set = ${ "{" ~ (attr ~ ";"?)* ~ "}" }
rec_attr_set = ${ "rec" ~ WHITESPACE+ ~ attr_set }
attr = {
    inherit_attr |
    string ~ "=" ~ expr |
    identifier ~ "?"? ~ "=" ~ expr
}
inherit_attr = ${ "inherit" ~ ("(" ~ expr ~ ")")? ~ identifier+ }

list = ${ "[" ~ (expr ~ ","?)* ~ "]" }

if_then_else = { "if" ~ expr ~ "then" ~ expr ~ "else" ~ expr }
with_expr = { "with" ~ expr ~ ";" ~ expr }
let_in = { "let" ~ (attr ~ ";"?)* ~ "in" ~ expr }
assert = { "assert" ~ expr ~ ";" ~ expr }

interpolation = ${ "${" ~ expr ~ "}" }

lambda = { identifier ~ ":" ~ expr }

atom = _{
    if_then_else |
    with_expr |
    let_in |
    assert |
    lambda |
    rec_attr_set |
    attr_set |
    list |
    interpolation |
    string |
    indented_string |
    path |
    search_path |
    uri |
    boolean |
    null |
    float |
    integer |
    identifier |
    "(" ~ expr ~ ")"
}


file = { SOI ~ expr ~ EOI }
